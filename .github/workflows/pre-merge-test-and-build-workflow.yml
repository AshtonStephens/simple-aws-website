name: Pre-merge Test and Build Workflow
run-name: ${{ github.actor }}\'s commit is being tested!
on:
  pull_request:
    branches:
    - pipeline-mayhem
      # Pull request types can be found here:
      # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request
    types: [opened, synchronize, reopened]
  push:
    branches:
    - pipeline-mayhem

jobs:

  # #################################################
  # Python code test and lint
  # #################################################

  Lint-And-Test-Python-Lambda:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./lambda
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Setup Poetry
        uses: Gr1N/setup-poetry@v8

      # Show versions.
      - run: python --version
      - run: poetry --version

      - run: poetry install
      - run: poetry run pylint src tests
      - run: poetry run pytest

  # #################################################
  # Test cloud formation template
  # #################################################

  Test-Cloud-Formation-Template:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./cloud_formation
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3
      - name: Set up node 18.16
        uses: actions/setup-node@v3
        with:
          node-version: 18.16.0
      - run: npm install
      - run: npm run build
      - run: npm run test

  # #################################################
  # Test Website and OpenAPI Client Autogenerator
  # #################################################

  # Note: We test the api autogenerator and the website
  # together because the website needs the autogenerated
  # client to build properly.

  Test-Autogenerate-Api-and-Website:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api_definition
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3

      - name: Setup Java 20
        uses: actions/setup-java@v3
        with:
          distribution: corretto
          java-version: 20

      - name: Set up node 18.16
        uses: actions/setup-node@v3
        with:
          node-version: 18.16.0

      - name: Install Api Depencencies
        working-directory: ./api_definition
        run: npm install

      - name: Build Api Client
        working-directory: ./api_definition
        run: npm run build

      - name: Install Website Depencencies
        working-directory: ./website
        run: npm install

      - name: Build Api Client
        working-directory: ./website
        run: npm run build && npm run test

  # #################################################
  # Deploy to CloudFormation
  # #################################################

  Deploy-To-Cloud-Formation:
    runs-on: ubuntu-latest
    needs:
      - Lint-And-Test-Python-Lambda
      - Test-Cloud-Formation-Template
      - Test-Autogenerate-Api-and-Website
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3

      - name: Set up node 18.16
        uses: actions/setup-node@v3
        with:
          node-version: 18.16.0

      # Needed for API Autogenerator
      - name: Setup Java 20
        uses: actions/setup-java@v3
        with:
          distribution: corretto
          java-version: 20

      - name: Build autogenerated api client
        working-directory: ./api_definition
        run: npm install && npm run build

      - name: Build website webpack bundle
        working-directory: ./website
        run: npm install && npm run build

      - name: Build cloudformation template
        working-directory: ./cloud_formation
        run: npm install && npm run build

        # We install cdk ourselves instead of using an existing github action for cdk cli
        # commands because all are owned by non-trusted sources, and could be updated to
        # leak our credentials.
      - name: Globally install CDK
        run: npm install -g aws-cdk@2.81.0

      - name: Deploy environment
        working-directory: ./cloud_formation
        run: cdk deploy --require-approval never
        env:
          # AWS access keys with permission to deploy to cloud formation
          # NOTE: I need full access to the repo to store secrets. This is a
          # temporary measure but very easily swapped out once I have permissions.
          AWS_ACCESS_KEY_ID: AKIA2ZSOLEBV5PGPKB66
          AWS_SECRET_ACCESS_KEY: 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

          # AWS Deployment Account and Configurations
          AWS_ACCOUNT: 742119907435
          AWS_REGION: us-west-2
          AWS_STAGE: salsa
